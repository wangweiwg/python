# 整数
# 十六进制用0x前缀和0~9、a~f表示
# 
# 浮点数，也就是小数
# 对于很大或者很小的浮点数，必须使用科学计数法表示，把10用e替代
# 整数和浮点数在计算机内部存储的方式是不同，整数运算永远是精确的（包括除法）, 而浮点数运算则可能会四舍五入
# 
# 字符串
# 字符串是以单引号或者双引号括起来的任意文本
# 如果字符串中包含单引号或者双引号可以使用转义字符\来标识
# \n 表示换行
# \t表示制表符
# \\表示\
# 如果字符串里面有很多字符都需要转义，就需要很多\，为了简化，Python还允许使用 r'' 表示''内部的字符串默认不转义
# 如果字符串内部有很多换行，用\n写在一行里不好阅读，为了简化，Python允许使用'''...'''的格式表示多行内容，例如：
'''
	这是第一行。。。
	这是第二行。。。
	这是第三行。。。
'''

# 布尔值： True/False
# 布尔值可以用and、or和not运算
# and运算是与运算，只有所有都为True，and运算结果才是True
# or运算是或运算，只要其中有一个为True，or运算结果就是True
# not运算是非运算，它是一个单目运算符，把True变成False，False变成True


# 空值：None
# 空值是Python里一个特殊的值，用None表示，None不能理解为0，因为0是有意义的，而None是一个特殊的空值


# 在Python中，等号=是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量
a = 123;
a = 'ABC';
# 这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言在定义变量时必须指定变量类型，如果赋值
# 的时候类型不匹配，就会报错，例如Java是静态语言，赋值 语句如下：
int b = 123;
# 会报错
b = 'ABC';


# 理解变量在计算机内存中的表示：
c = 134;
# Python解释器干了两件事：
# 1、在内存中创建了一个134的整数
# 2、在内存中创建了一个名为c的变量，并把它指向134
# 也可以把一个变量c赋值给另一个变量d，这个操作实际上是把变量d指向变量c所指向的数据


# 常量
# 所谓常量就是不能变的变量，通常习惯性的用全部大写的变量名表示常量
PI = 3.14150265359;
# 有两种除法
# / 得到的结果都是浮点数
# // 整数除整数无论能不能整除得到的都是整数， 也叫做地板除
# 无论整数做//除法还是取余数，结果永远是整数，所以，整数运算结果永远是精确的


# Python的浮点数也没有大小限制，但是超出一定范围就直接表示为inf（无限大）

