# 函数和模块的使用
# 编程大师Martin Fowler先生说过’代码有很多种坏味道，重复是最坏的一种！‘，
# 要写出高质量的代码首先要解决的就是重复代码的问题


# 定义函数：在Python中可以使用def关键字来定义函数，和变量一样每个函数也有一个响亮的名字，

# Python的math模块中其实已经有一个factorial函数了，事实上要计算阶乘可以直接使用这个现成的
# 函数而不用自己定义，


# 函数的参数
# 函数是绝大多数编程语言中都支持的一个代码的构建块，但是Python中的函数与其他语言中的函数还是有很多
# 不太相同的地方，其中一个显著的区别就是Python对函数参数的处理。在Python中，函数的参数可以有默认值，
# 也支持使用可变参数，所以并不需要像其他语言一样支持函数的重载，因为我们在定义一个函数的时候可以让
# 它有多种不同的使用方式，

# 可变参数
def add(*args):
	total = 0
	for val in args:
		total += val
	return total

print(add())
print(add(1))
print(add(1, 2))
print(add(1, 2, 3))
print(add(1, 2, 3, 4))
print(add(1, 2, 3, 4, 5))

# 用模块管理函数
# 对于任何一种编程语言来说，给变量、函数这样的标签起名字都是一个让人头疼的问题，因为我们会遇到命名冲突这种尴尬的
# 情况。最简单的场景就是在同一个.py文件中定义了两个同名函数，由于Python没有函数重载的概念，那么后面定义的会
# 覆盖之前的定义，也就意味着两个函数同名函数实际上只有一个存在的。
# 怎么避免这种冲突呢，其实很简单，Python中每个文件就代表一个模块(module)，我们在不同的模块中可以有同名的函数。
# 在使用函数的时候我们通过import关键字导入指定的模块就可以区分到底使用的是哪个模块中的foo函数，


# 如果我们导入的模块除了定义函数之外其中还有可以执行的代码，那么Python解释器在导入这个模块时就会执行
# 这些代码，事实上，我们可能并不希望如此，因此如果我们在模块中编写了执行代码，最好是将这些执行代码
# 放入如下所示的条件中，这样的话除非直接运行该模块，if条件下的这些代码是不会执行的，因为只有直接执行的模块
# 的名字才是‘__main__’

if __name__ == '__main__':
	print('只有直接执行该代码块的时候才走if条件')






