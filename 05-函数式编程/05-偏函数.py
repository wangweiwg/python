# 偏函数
# Python的functools模块提供了很多有用的功能，其中一个就是偏函数（Partial function）
# 这里的偏函数和数学意义上的偏函数不一样
# 前面介绍函数的时候，可是通过设定参数的默认值，可以降低函数调用的难度，偏函数也可以做到这一点
# 例如：
# int()函数可以把字符串转换为整数，当仅传入字符串时，int()函数默认按十进制转换：
int('123456'); # 12345
# 但是int()函数还提供额外的base参数，默认传10，如果传入base参数，就可以做N进制的转换
int('123456', base=8);
int('123456', base=16);
# 假设要转换大量的二进制字符串，每次都传入int(x, base=2)非常麻烦，可以定义一个int2()的函数，
# 默认把base=2传进入
def int2(x, base=2):
	return int(x, base);

# functools.partial就是帮助我们创建一个偏函数的，不需要我们自己定义int2()，可以直接使用下面的
# 代码创建一个新的函数int2
import functools;
int3 = functools.partial(int, base=3);
# functools.partical的作用就是，把一个函数的某些参数给固定住（也就是设置默认值）,返回一个新的函数，调用更简单
# int3函数仅仅是把base参数重新设定为默认值3，但是也可以在调用的时候传入其他值
# 创建函数时，实际上可以接收函数对象、*args和**kw这3个参数
# 相当于：
kw = {'base': 3};
int('10010', **kw);

# 总结：当函数的参数太多，需要简化时，使用functools.partial可以创建一个新的函数，这个新函数可以固定住原
# 函数的部分参数，从而在调用时更简单











